// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/zgsm-ai/codebase-indexer/internal/dao/model"
)

func newCodebase(db *gorm.DB, opts ...gen.DOOption) codebase {
	_codebase := codebase{}

	_codebase.codebaseDo.UseDB(db, opts...)
	_codebase.codebaseDo.UseModel(&model.Codebase{})

	tableName := _codebase.codebaseDo.TableName()
	_codebase.ALL = field.NewAsterisk(tableName)
	_codebase.ID = field.NewInt32(tableName, "id")
	_codebase.ClientID = field.NewString(tableName, "client_id")
	_codebase.UserID = field.NewString(tableName, "user_id")
	_codebase.Name = field.NewString(tableName, "name")
	_codebase.ClientPath = field.NewString(tableName, "client_path")
	_codebase.Status = field.NewString(tableName, "status")
	_codebase.Path = field.NewString(tableName, "path")
	_codebase.FileCount = field.NewInt32(tableName, "file_count")
	_codebase.TotalSize = field.NewInt64(tableName, "total_size")
	_codebase.ExtraMetadata = field.NewString(tableName, "extra_metadata")
	_codebase.CreatedAt = field.NewTime(tableName, "created_at")
	_codebase.UpdatedAt = field.NewTime(tableName, "updated_at")

	_codebase.fillFieldMap()

	return _codebase
}

type codebase struct {
	codebaseDo codebaseDo

	ALL           field.Asterisk
	ID            field.Int32  // Unique identifier for the project repository
	ClientID      field.String // User client identifier, such as MAC address
	UserID        field.String // User identifier, such as email or phone number
	Name          field.String // Name of the project repository
	ClientPath    field.String // Local path of the project on the user's machine
	Status        field.String
	Path          field.String // Path of the codebase
	FileCount     field.Int32  // Number of files in the project
	TotalSize     field.Int64  // Total size of the project (in bytes)
	ExtraMetadata field.String // Additional metadata about the project
	CreatedAt     field.Time   // Time when the record was created
	UpdatedAt     field.Time   // Time when the record was last updated

	fieldMap map[string]field.Expr
}

func (c codebase) Table(newTableName string) *codebase {
	c.codebaseDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c codebase) As(alias string) *codebase {
	c.codebaseDo.DO = *(c.codebaseDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *codebase) updateTableName(table string) *codebase {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.ClientID = field.NewString(table, "client_id")
	c.UserID = field.NewString(table, "user_id")
	c.Name = field.NewString(table, "name")
	c.ClientPath = field.NewString(table, "client_path")
	c.Status = field.NewString(table, "status")
	c.Path = field.NewString(table, "path")
	c.FileCount = field.NewInt32(table, "file_count")
	c.TotalSize = field.NewInt64(table, "total_size")
	c.ExtraMetadata = field.NewString(table, "extra_metadata")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *codebase) WithContext(ctx context.Context) *codebaseDo { return c.codebaseDo.WithContext(ctx) }

func (c codebase) TableName() string { return c.codebaseDo.TableName() }

func (c codebase) Alias() string { return c.codebaseDo.Alias() }

func (c codebase) Columns(cols ...field.Expr) gen.Columns { return c.codebaseDo.Columns(cols...) }

func (c *codebase) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *codebase) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 12)
	c.fieldMap["id"] = c.ID
	c.fieldMap["client_id"] = c.ClientID
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["name"] = c.Name
	c.fieldMap["client_path"] = c.ClientPath
	c.fieldMap["status"] = c.Status
	c.fieldMap["path"] = c.Path
	c.fieldMap["file_count"] = c.FileCount
	c.fieldMap["total_size"] = c.TotalSize
	c.fieldMap["extra_metadata"] = c.ExtraMetadata
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c codebase) clone(db *gorm.DB) codebase {
	c.codebaseDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c codebase) replaceDB(db *gorm.DB) codebase {
	c.codebaseDo.ReplaceDB(db)
	return c
}

func (c codebase) FindByClientIdAndPath(ctx context.Context, clientId string, clientPath string) (*model.Codebase, error) {
	return c.codebaseDo.WithContext(ctx).Where(c.ClientID.Value(clientId), c.ClientPath.Value(clientPath), c.Status.Value(string(model.CodebaseStatusActive))).First()
}

type codebaseDo struct{ gen.DO }

func (c codebaseDo) Debug() *codebaseDo {
	return c.withDO(c.DO.Debug())
}

func (c codebaseDo) WithContext(ctx context.Context) *codebaseDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c codebaseDo) ReadDB() *codebaseDo {
	return c.Clauses(dbresolver.Read)
}

func (c codebaseDo) WriteDB() *codebaseDo {
	return c.Clauses(dbresolver.Write)
}

func (c codebaseDo) Session(config *gorm.Session) *codebaseDo {
	return c.withDO(c.DO.Session(config))
}

func (c codebaseDo) Clauses(conds ...clause.Expression) *codebaseDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c codebaseDo) Returning(value interface{}, columns ...string) *codebaseDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c codebaseDo) Not(conds ...gen.Condition) *codebaseDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c codebaseDo) Or(conds ...gen.Condition) *codebaseDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c codebaseDo) Select(conds ...field.Expr) *codebaseDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c codebaseDo) Where(conds ...gen.Condition) *codebaseDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c codebaseDo) Order(conds ...field.Expr) *codebaseDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c codebaseDo) Distinct(cols ...field.Expr) *codebaseDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c codebaseDo) Omit(cols ...field.Expr) *codebaseDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c codebaseDo) Join(table schema.Tabler, on ...field.Expr) *codebaseDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c codebaseDo) LeftJoin(table schema.Tabler, on ...field.Expr) *codebaseDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c codebaseDo) RightJoin(table schema.Tabler, on ...field.Expr) *codebaseDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c codebaseDo) Group(cols ...field.Expr) *codebaseDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c codebaseDo) Having(conds ...gen.Condition) *codebaseDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c codebaseDo) Limit(limit int) *codebaseDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c codebaseDo) Offset(offset int) *codebaseDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c codebaseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *codebaseDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c codebaseDo) Unscoped() *codebaseDo {
	return c.withDO(c.DO.Unscoped())
}

func (c codebaseDo) Create(values ...*model.Codebase) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c codebaseDo) CreateInBatches(values []*model.Codebase, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c codebaseDo) Save(values ...*model.Codebase) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c codebaseDo) First() (*model.Codebase, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Codebase), nil
	}
}

func (c codebaseDo) Take() (*model.Codebase, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Codebase), nil
	}
}

func (c codebaseDo) Last() (*model.Codebase, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Codebase), nil
	}
}

func (c codebaseDo) Find() ([]*model.Codebase, error) {
	result, err := c.DO.Find()
	return result.([]*model.Codebase), err
}

func (c codebaseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Codebase, err error) {
	buf := make([]*model.Codebase, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c codebaseDo) FindInBatches(result *[]*model.Codebase, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c codebaseDo) Attrs(attrs ...field.AssignExpr) *codebaseDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c codebaseDo) Assign(attrs ...field.AssignExpr) *codebaseDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c codebaseDo) Joins(fields ...field.RelationField) *codebaseDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c codebaseDo) Preload(fields ...field.RelationField) *codebaseDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c codebaseDo) FirstOrInit() (*model.Codebase, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Codebase), nil
	}
}

func (c codebaseDo) FirstOrCreate() (*model.Codebase, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Codebase), nil
	}
}

func (c codebaseDo) FindByPage(offset int, limit int) (result []*model.Codebase, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c codebaseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c codebaseDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c codebaseDo) Delete(models ...*model.Codebase) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *codebaseDo) withDO(do gen.Dao) *codebaseDo {
	c.DO = *do.(*gen.DO)
	return c
}
