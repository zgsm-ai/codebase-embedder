// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3

package types

import (
	"regexp"
)

type CodebaseHashResponseData struct {
	CodebaseHash []*CodebaseFileHashItem `json:"list"` // 项目文件树
}

type FileContentRequest struct {
	ClientId     string `form:"clientId"`                     // 用户机器ID
	CodebasePath string `form:"codebasePath"`                 // 项目绝对路径
	FilePath     string `form:"filePath"`                     // 文件相对路径
	StartLine    int    `form:"startLine,optional,default=1"` // 开始行（默认1）
	EndLine      int    `form:"endLine,optional,default=100"` // 结束行（默认100，-1=全部）
}

type FileUploadRequest struct {
	ClientId      string `form:"clientId"`               // 客户ID
	CodebasePath  string `form:"codebasePath"`           // 项目路径
	CodebaseName  string `form:"codebaseName"`           // 项目名称
	ExtraMetadata string `form:"extraMetadata,optional"` // 额外元数据（JSON字符串）
}

type CodebaseHashRequest struct {
	ClientId     string `form:"clientId"`     // 客户ID
	CodebasePath string `form:"codebasePath"` // 项目路径
}

type CodebaseFileHashItem struct {
	Path string `json:"path"` // 文件路径
	Hash string `json:"hash"` // 文件哈希值
}

type RelationRequest struct {
	ClientId       string `form:"clientId"`                    // 用户机器ID
	CodebasePath   string `form:"codebasePath"`                // 项目绝对路径
	FilePath       string `form:"filePath"`                    // 文件相对路径
	StartLine      int    `form:"startLine"`                   // 开始行
	StartColumn    int    `form:"startColumn"`                 // 开始列
	EndLine        int    `form:"endLine"`                     // 结束行
	EndColumn      int    `form:"endColumn"`                   // 结束列
	SymbolName     string `form:"symbolName,optional"`         // 符号名（可选）
	IncludeContent int    `form:"includeContent,default=0"`    // 是否返回代码内容（1=是，0=否，默认0）
	MaxLayer       int    `form:"maxLayer,optional,default=1"` // 最大层级数（默认1）
}


type SemanticFileItem struct {
	Content  string  `json:"content"`  // 代码片段
	FilePath string  `json:"filePath"` // 文件相对路径
	Score    float32 `json:"score"`    // 匹配得分
}

type SemanticSearchRequest struct {
	ClientId     string  `json:"clientId"`                 // 用户机器ID（如MAC地址）
	CodebasePath string  `json:"codebasePath"`             // 项目绝对路径
	Query        string  `json:"query"`                    // 查询内容
	TopK         int     `json:"topK,optional,default=10"` // 结果返回数量（默认10）
	ScoreThreshold float32 `json:"scoreThreshold,optional,default=0.3"` // 分数阈值，默认0.3
}

type SemanticSearchResponseData struct {
	List []*SemanticFileItem `json:"list"` // 检索结果列表
}




// ListOption 定义List方法的可选参数
type ListOption func(*ListOptions)

// ListOptions 包含List方法的可选参数
type ListOptions struct {
	Recursive      bool           // 是否递归列出子目录
	Limit          int            // 返回结果数量限制
	Offset         int            // 结果偏移量
	ExcludePattern *regexp.Regexp // 排除文件的正则表达式
	IncludePattern *regexp.Regexp // 包含文件的正则表达式
}

// TreeOption 定义Tree方法的可选参数
type TreeOption func(*TreeOptions)

// TreeOptions 包含Tree方法的可选参数
type TreeOptions struct {
	MaxDepth       int            // 最大递归深度
	ExcludePattern *regexp.Regexp // 排除文件的正则表达式
	IncludePattern *regexp.Regexp // 包含文件的正则表达式
}

type ReadOptions struct {
	StartLine int
	EndLine   int
}



type FileDefinitionParseRequest struct {
	ClientId     string `form:"clientId"`     // 用户机器ID
	CodebasePath string `form:"codebasePath"` // 项目绝对路径
	FilePath     string `form:"filePath"`     // 文件相对路径
}




type DefinitionRequest struct {
	ClientId     string `form:"clientId"`             // 用户机器ID
	CodebasePath string `form:"codebasePath"`         // 项目绝对路径
	FilePath     string `form:"filePath,optional"`    // 文件相对路径
	StartLine    int    `form:"startLine,optional"`   // 开始行
	EndLine      int    `form:"endLine,optional"`     // 结束行
	CodeSnippet  string `form:"codeSnippet,optional"` // 代码片段
}


type DeleteCodebaseRequest struct {
	ClientId     string `form:"clientId"`     // 用户机器ID（如MAC地址）
	CodebasePath string `form:"codebasePath"` // 项目绝对路径
}

type DeleteCodebaseResponseData struct {
}

type DeleteIndexRequest struct {
	ClientId     string `form:"clientId"`               // 用户机器ID（如MAC地址）
	CodebasePath string `form:"codebasePath"`           // 项目绝对路径
	FilePaths    string `form:"filePaths,optional"`     // 要删除的文件路径file1.js 如果不传则根据clientId、codebasePath 删除工程
}

type DeleteIndexResponseData struct {
}

type EmbeddingSummary struct {
	Status     string `json:"status"`
	UpdatedAt  string `json:"updatedAt"`
	TotalFiles int    `json:"totalFiles"`
	TotalChunks int    `json:"totalChunks"`
}

type IndexSummaryRequest struct {
	ClientId     string `form:"clientId"`     // 客户端id
	CodebasePath string `form:"codebasePath"` // 项目绝对路径
}

type IndexSummaryResonseData struct {
	TotalFiles int
	Embedding  EmbeddingSummary `json:"embedding"`
}

type IndexTaskRequest struct {
	ClientId      string `json:"clientId"`               // 客户端唯一标识（如MAC地址）
	CodebasePath  string `json:"codebasePath"`           // 项目绝对路径
	CodebaseName  string `json:"codebaseName"`           // 项目名称
	UploadToken   string `json:"uploadToken,optional"`   // 上传令牌
	ExtraMetadata string `json:"extraMetadata,optional"` // 额外元数据（JSON字符串）
	FileTotals    int    `json:"fileTotals"`             // 上传工程文件总数
    RequestId     string `json:"requestId,optional"`     // 请求ID，用于跟踪和调试
}

type IndexTaskResponseData struct {
	TaskId int `json:"taskId"`
}

type TokenRequest struct {
	ClientId     string `json:"clientId"`     // 客户端唯一标识
	CodebasePath string `json:"codebasePath"` // 项目绝对路径
	CodebaseName string `json:"codebaseName"` // 项目名称
}

type TokenResponseData struct {
	Token     string `json:"token"`     // JWT令牌
	ExpiresIn int    `json:"expiresIn"` // 有效期(秒)
	TokenType string `json:"tokenType"` // 令牌类型
}
